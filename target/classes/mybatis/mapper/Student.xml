<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，做sql隔离 -->
<mapper namespace="net.dfrz.mapper.StudentMapper">

	<resultMap id="StudentResultMap" type="student">
		<result property="name" column="name1" />
	</resultMap>

	<!-- sql片段，减少重复工作,相当于将这些列名存入了id这个名称中 -->
	<sql id="all">stuID,name,birthday,sex</sql>

	<!-- id:sql语句唯一标识 parameterType:指定传入参数类型（不是数据库中的类型） resultType:返回结果集类型 #{}:占位符，如果传入的类型是基本类型（String,long,double,int,boolean,float等），那么#{}中变量名称可以任意 -->

	<!-- 插入数据 -->
	<insert id="insertStudent"
		parameterType="net.dfrz.entity.Student">
		<selectKey keyProperty="stuID" resultType="String"
			order="BEFORE">
			select replace(uuid(),"-","")
		</selectKey>
		insert into t_student(
		<include refid="all"></include>
		) values(#{stuID},#{name},#{birthday},#{sex})
	</insert>

	<!-- 删除 -->
	<delete id="deleteStudentById" parameterType="string">
		delete
		from t_student where stuID = #{stuID}
	</delete>

	<!-- 修改 -->
	<update id="updateStudentById"
		parameterType="net.dfrz.entity.Student">
		update t_student set name=#{name} where stuID = #{stuID}
	</update>

	<!-- 约定大于配置 -->
	<!-- 查询 -->
	<select id="selectStudentById" parameterType="string"
		resultType="student">
		select
		<include refid="all"></include>
		from t_student where stuID = #{stuID}
	</select>

<!-- 	<select id="selectStudentAll" parameterType="map"
		resultType="student"> -->
		<select id="selectStudentAll" parameterType="map"
		resultType="student">
		select
		<include refid="all"></include>
		from t_student
		<where>
			1=1
			<!-- 满足条件则继续追加 -->
<!--  			<if test="name!=null">
				and name LIKE CONCAT('%','${name}','%')
			</if>
			<if test="start!=null and end!=null">
				and birthday between #{start} and #{end}
			</if>
			<if test="sex!=null">
				and sex = #{sex}
			</if>  -->
			<!-- choose满足则停止 -->
			<choose>
				<when test="ids!=null">
					and stuID in 
					<foreach item="item" collection="ids" open="(" separator="," close=")">
						#{item}
					</foreach>
				</when>
				<when test="name!=null">
					and name LIKE CONCAT('%','${name}','%')
				</when>
				<when test="start!=null and end!=null">
					and birthday between #{start} and #{end}
				</when>
				<when test="sex!=null">
					and sex = #{sex}
				</when>
			</choose>
		</where>
	</select>

	<select id="selectStudentByBirthday" parameterType="map"
		resultType="student">
		select
		<include refid="all"></include>
		from t_student where birthday between #{start} and #{end}
	</select>

	<!-- resultType="student"时，列名不匹配无法封装进对象 -->
	<select id="selectStudentBirthandNameById"
		parameterType="string" resultMap="StudentResultMap">
		select name as name1,birthday from
		t_student where stuID=#{stuID}
	</select>
	<!-- 下面这句resultType="map",也相当于上面这句话resultMap="StudentResultMap"(推荐) -->
	<select id="selectStudentBirthandName4MapById"
		parameterType="string" resultType="map">
		select name as name1,birthday from
		t_student where stuID=#{stuID}
	</select>

</mapper>
